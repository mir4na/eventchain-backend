datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(uuid())
  walletAddress String   @unique
  role          Role     @default(USER)
  name          String?
  email         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  events        Event[]
  tickets       Ticket[]
  proposals     Proposal[]
  transactions  Transaction[]
  favorites     Favorite[]
  walletHistory WalletHistory[]
}

enum Role {
  ADMIN
  EO
  USER
}

model WalletHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  details   Json
  createdAt DateTime @default(now())

  @@index([userId])
}

model Admin {
  id        String   @id @default(uuid())
  address   String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String      @id @default(uuid())
  eventId     Int         @unique @default(autoincrement())
  name        String
  description String
  location    String
  date        DateTime
  posterUrl   String?
  status      EventStatus @default(PENDING)
  finalized   Boolean     @default(false)
  
  creatorId   String
  creator     User        @relation(fields: [creatorId], references: [id])
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  ticketTypes TicketType[]
  proposals   Proposal[]
  tickets     Ticket[]
  favorites   Favorite[]
  transactions Transaction[]
  
  @@index([creatorId])
  @@index([status])
  @@index([date])
}

enum EventStatus {
  PENDING
  APPROVED
  ACTIVE
  ENDED
  CANCELLED
}

model Proposal {
  id                    String          @id @default(uuid())
  eventId               String          @unique
  event                 Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  creatorId             String
  creator               User            @relation(fields: [creatorId], references: [id])
  
  revenueBeneficiaries  Json
  taxWalletAddress      String
  
  status                ProposalStatus  @default(PENDING)
  adminComment          String?
  
  submittedAt           DateTime        @default(now())
  reviewedAt            DateTime?
  
  @@index([status])
  @@index([creatorId])
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

model TicketType {
  id              String   @id @default(uuid())
  typeId          Int      @default(autoincrement())
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  price           String
  stock           Int
  sold            Int      @default(0)
  
  saleStartDate   DateTime
  saleEndDate     DateTime
  
  benefits        Json?
  active          Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  tickets         Ticket[]
  
  @@unique([eventId, typeId])
  @@index([eventId])
  @@index([active])
}

model Ticket {
  id                String        @id @default(uuid())
  ticketId          Int           @unique
  
  eventId           String
  event             Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  typeId            String
  ticketType        TicketType    @relation(fields: [typeId], references: [id])
  
  ownerId           String
  owner             User          @relation(fields: [ownerId], references: [id])
  
  txHash            String
  blockNumber       Int
  originalPrice     String
  
  isUsed            Boolean       @default(false)
  isForResale       Boolean       @default(false)
  resalePrice       String?
  resaleDeadline    DateTime?
  resaleCount       Int           @default(0)
  
  qrCode            String        @unique
  tokenURI          String?
  
  mintedAt          DateTime
  usedAt            DateTime?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  transactions      Transaction[]
  
  @@index([ownerId])
  @@index([eventId])
  @@index([isForResale])
  @@index([isUsed])
}

model Transaction {
  id              String          @id @default(uuid())
  txHash          String          @unique
  
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  
  type            TransactionType
  
  from            String
  to              String?
  amount          String
  
  eventId         String?
  event           Event?          @relation(fields: [eventId], references: [id])
  ticketId        String?
  ticket          Ticket?         @relation(fields: [ticketId], references: [id])
  
  blockNumber     Int
  timestamp       DateTime
  
  createdAt       DateTime        @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([txHash])
  @@index([timestamp])
}

enum TransactionType {
  PURCHASE
  RESALE_BUY
  USE
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}